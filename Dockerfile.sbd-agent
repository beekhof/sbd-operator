# ==============================================================================
# Build Stage - Compile the SBD Agent Go application
# ==============================================================================
FROM registry.access.redhat.com/ubi9/go-toolset:1.21 AS builder

# Install build dependencies and certificates for HTTPS connections
RUN microdnf install -y git ca-certificates tzdata

# Create a non-root user for the build process
RUN useradd -r -g '' appuser

# Set the working directory inside the container
WORKDIR /build

# Copy go.mod and go.sum files for dependency caching
# This allows Docker to cache the dependency download step
COPY go.mod go.sum ./

# Download dependencies
# This step is cached as long as go.mod and go.sum don't change
RUN go mod download

# Verify dependencies
RUN go mod verify

# Copy the entire source code
COPY . .

# Build the SBD Agent binary
# CGO_ENABLED=0: Disable CGO for a static binary
# GOOS=linux: Target Linux OS
# GOARCH=amd64: Target x86_64 architecture
# -a: Force rebuilding of packages
# -installsuffix cgo: Add suffix for CGO-disabled builds
# -ldflags: Linker flags to reduce binary size and remove debug info
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o sbd-agent \
    ./cmd/sbd-agent/main.go

# ==============================================================================
# Runtime Stage - Minimal container for running the SBD Agent
# ==============================================================================
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

# Install runtime dependencies
# - ca-certificates: For HTTPS connections
# - util-linux: Provides device utilities that might be needed
RUN microdnf install -y ca-certificates util-linux && microdnf clean all

# Import the user and group files from the builder stage
# This ensures we have a non-root user available
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Create directories that the application might need
RUN mkdir -p /var/log/sbd-agent && \
    mkdir -p /etc/sbd-agent

# Copy the timezone data from builder
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the CA certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the compiled binary from the builder stage
COPY --from=builder /build/sbd-agent /usr/local/bin/sbd-agent

# Make the binary executable
RUN chmod +x /usr/local/bin/sbd-agent

# Set ownership of application directories to the non-root user
RUN chown -R appuser:appuser /var/log/sbd-agent /etc/sbd-agent

# Use the non-root user for running the application
# Note: The container will need to be run with --privileged and --cap-add=SYS_ADMIN
# for watchdog and block device access, which will override this user setting
USER appuser

# Set the working directory
WORKDIR /

# Expose any ports if needed (currently none required)
# EXPOSE 8080

# Add labels for better container management
LABEL maintainer="medik8s" \
      description="SBD Agent for hardware watchdog and SBD device management" \
      version="latest" \
      org.opencontainers.image.title="SBD Agent" \
      org.opencontainers.image.description="SBD Agent for Linux watchdog and SBD device management" \
      org.opencontainers.image.vendor="medik8s" \
      org.opencontainers.image.licenses="Apache-2.0"

# Define the entrypoint
# This is the command that will be executed when the container starts
ENTRYPOINT ["/usr/local/bin/sbd-agent"]

# Default command arguments
# These can be overridden when running the container
CMD ["--watchdog-path=/dev/watchdog", "--watchdog-timeout=30s", "--log-level=info"]

# ==============================================================================
# Container Usage Instructions
# ==============================================================================
# To build the image:
#   docker build -f Dockerfile.sbd-agent -t sbd-agent:latest .
#
# To run the container with required privileges:
#   docker run --privileged \
#              --cap-add=SYS_ADMIN \
#              --device=/dev/watchdog \
#              --volume=/dev:/dev \
#              --volume=/path/to/sbd/device:/dev/sbd \
#              sbd-agent:latest \
#              --sbd-device=/dev/sbd \
#              --watchdog-timeout=15s
#
# For Kubernetes deployment, ensure the pod has:
#   securityContext:
#     privileged: true
#     capabilities:
#       add:
#         - SYS_ADMIN
#   volumeMounts:
#     - name: dev
#       mountPath: /dev
#     - name: watchdog
#       mountPath: /dev/watchdog
# ============================================================================== 