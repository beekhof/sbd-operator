apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: sbd-agent
  namespace: sbd-system
  labels:
    app: sbd-agent
    component: sbd-agent
    version: latest
spec:
  selector:
    matchLabels:
      app: sbd-agent
  template:
    metadata:
      labels:
        app: sbd-agent
        component: sbd-agent
        version: latest
      annotations:
        # Annotations for better monitoring and debugging
        prometheus.io/scrape: "false"
    spec:
      # Service account for RBAC
      serviceAccountName: sbd-agent
      
      # Host network access for device management
      hostNetwork: true
      hostPID: true
      
      # DNS policy for host network
      dnsPolicy: ClusterFirstWithHostNet
      
      # Priority class for critical system pods
      priorityClassName: system-node-critical
      
      # Restart policy
      restartPolicy: Always
      
      # Node selection - run on all Linux nodes
      nodeSelector:
        kubernetes.io/os: linux
      
      # Node affinity for more flexible node selection
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      
      # Tolerations to run on all nodes including control plane
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      
      # Init containers for setup
      initContainers:
      - name: watchdog-check
        image: alpine:3.18
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking for watchdog device..."
          if [ -e /dev/watchdog ]; then
            echo "Watchdog device found: /dev/watchdog"
            ls -la /dev/watchdog*
          else
            echo "WARNING: No watchdog device found"
            echo "Available devices in /dev:"
            ls -la /dev/ | grep -E "(watchdog|wdt)" || echo "No watchdog devices found"
          fi
        volumeMounts:
        - name: dev
          mountPath: /dev
          readOnly: true
        securityContext:
          privileged: true
      
      # Main container
      containers:
      - name: sbd-agent
        image: sbd-agent:latest
        imagePullPolicy: Always
        
        # Security context with required privileges
        securityContext:
          privileged: true
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
            drop:
            - ALL
        
        # Resource management
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        
        # Environment variables
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        # Command line arguments
        args:
        - "--watchdog-path=/dev/watchdog"
        - "--watchdog-timeout=30s"
        - "--log-level=info"
        
        # Volume mounts
        volumeMounts:
        - name: dev
          mountPath: /dev
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: proc
          mountPath: /proc
          readOnly: true
        
        # Liveness probe to ensure the agent is healthy
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f sbd-agent > /dev/null"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe to check if the agent is ready
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "test -c /dev/watchdog && pgrep -f sbd-agent > /dev/null"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for initial startup
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f sbd-agent > /dev/null"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
      
      # Volumes
      volumes:
      - name: dev
        hostPath:
          path: /dev
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      
      # Termination grace period
      terminationGracePeriodSeconds: 30

---
# ServiceAccount for the SBD Agent
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sbd-agent
  namespace: sbd-system
  labels:
    app: sbd-agent

---
# ClusterRole for SBD Agent permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sbd-agent
  labels:
    app: sbd-agent
rules:
# Allow reading node information
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
# Allow reading pod information
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
# Allow reading events
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create"]

---
# ClusterRoleBinding for SBD Agent
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sbd-agent
  labels:
    app: sbd-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sbd-agent
subjects:
- kind: ServiceAccount
  name: sbd-agent
  namespace: sbd-system 